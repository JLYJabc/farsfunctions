include.lowest = TRUE,
labels = c("Under 15", "15 to 50","Over 50"))) %>% group_by(agecat, Sex, Pclass) %>%
summarize(survivors = sum(Survived), N = sum(Pclass), perc_survived = survivors / N * 100.00000000) %>%
dplyr::select(Pclass, agecat, Sex, N, survivors, perc_survived) %>% dplyr::arrange(Pclass) %>%
dplyr::mutate(perc_survived = round(perc_survived, 6))
submit()
head(titanic_4)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50","Over 50"))) %>% group_by(agecat, Sex, Pclass) %>%
summarize(survivors = sum(Survived), N = sum(Pclass), perc_survived = survivors / N * 100.00000000) %>%
dplyr::select(Pclass, agecat, Sex, N, survivors, perc_survived) %>% dplyr::arrange(Pclass) %>%
dplyr::mutate(perc_survived = round(perc_survived, 10))
head(titanic_4)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50","Over 50"))) %>% group_by(agecat, Sex, Pclass) %>%
summarize(survivors = sum(Survived), N = sum(Pclass), perc_survived = percent(survivors,N)) %>%
dplyr::select(Pclass, agecat, Sex, N, survivors, perc_survived) %>% dplyr::arrange(Pclass)
percent_rank(x = 10)
options(digits=10)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50","Over 50"))) %>% group_by(agecat, Sex, Pclass) %>%
summarize(survivors = sum(Survived), N = sum(Pclass), perc_survived = survivors / N * 100.00000000) %>%
dplyr::select(Pclass, agecat, Sex, N, survivors, perc_survived) %>% dplyr::arrange(Pclass)
head(titanic_4)
options(digits=6)
head(titanic_4)
options(digits=8)
head(titanic_4)
submit()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50","Over 50"))) %>% group_by(agecat, Sex, Pclass) %>%
summarize(survivors = sum(Survived), N = sum(Pclass), perc_survived = survivors / N * 100.00000000) %>%
dplyr::select(Pclass, agecat, Sex, N, survivors, perc_survived) %>% dplyr::arrange(Pclass)
head(titanic_4)
skip()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50","Over 50"))) %>% group_by(agecat, Sex, Pclass) %>%
summarize(survivors = sum(Survived), N = sum(Pclass), perc_survived = survivors / N * 100.00000000) %>%
dplyr::select(Pclass, agecat, Sex, N, survivors, perc_survived) %>% dplyr::arrange(Pclass)
head(titanic_4)
swirl()
get2d()
getwd()
Factorial_func <- function(x) {
if(x < 0 | !(x%%1 == 0)) {
stop("Factorials can only be computed when x = 0 | x > 0")
} else if (x == 0){
return (1)
} else{
return (x * Factorial_func(x-1))
}
}
Factorial_func(4)
Factorial_func(0)
Factorial_func(1)
Factorial_func(2)
Factorial_func(8)
# converts a data frame into a â€œLongitudinalDataâ€ object
make_LD <- function(x){
structure(x, class = "LongitudinalData")
}
# a generic function for extracting subject-specific information
subject <- function(x, i) UseMethod("subject")
subject.LongitudinalData <- function(x, i) {
index <- which(x$id %in% i)
x <- lapply(x, function(x) x[index])
structure(x, class = "LongitudinalData")
}
# a generic function for extracting visit-specific information
visit <- function(i, j) UseMethod("visit")
visit.LongitudinalData <- function(x, j) {
index <- which(x$visit %in% j)
x <- lapply(x, function(x) x[index])
structure(x, class = "LongitudinalData")
}
# a generic function for extracting room-specific information
room <- function(i, j) UseMethod("room")
room.LongitudinalData <- function(x, k) {
index <- which(x$room == k)
x <- lapply(x, function(x) x[index])
structure(x, class = "LongitudinalData")
}
# print method for â€œLongitudinalDataâ€ object
print.LongitudinalData <- function(x, ...) {
if(length(unique(x$id)) == 1){
cat("Subject ID: ", unique(x$id), "\n")
} else if(length(unique(x$id)) == 0) {
cat("NULL")
} else {
cat("Longitudinal dataset with", length(unique(x$id)), "subjects")
}
if(length(unique(x$visit)) == 1){
cat("Visit: ", unique(x$visit), "\n")
}
if(length(unique(x$room)) == 1){
cat("Room: ", unique(x$room))
}
invisible(x)
}
# summary function
summary.LongitudinalData <- function(object, ...) {
object <- list(
summary.id = unique(object$id),
summary.data = data.frame(
visit = object$visit,
room = object$room,
value = object$value
)
)
if(length(unique(object$summary.data$visit)) == 1 &
length(unique(object$summary.data$room)) == 1){
object$summary.data <- summary(object$summary.data$value)
} else {
object$summary.data <- object$summary.data %>%
aggregate(value ~ visit + room, FUN = mean, data = .) %>%
spread(room, value)
}
class(object) <- "summary_LongitudinalData"
object
}
# print summary method for â€œLongitudinalDataâ€ object
print.summary_LongitudinalData <- function(x, ...) {
cat("Subject ID: ", x$summary.id, "\n")
print(x$summary.data)
invisible(x)
}
library(readr)
library(magrittr)
data <- read_csv("MIE.csv")
cols(
id = col_integer(),
visit = col_integer(),
room = col_character(),
value = col_double(),
timepoint = col_integer()
)
x <- make_LD(data)
print(class(x))
print(x)
data
out <- subject(x, 10)
library(RCurl)
ftpUpload("data/test_conn.txt", "sftp://asecvr:vxeE9VW@campaign.one/test_conn.txt")
ftpUpload("data/test_conn.txt", "sftp://asecvr:vxeE9VW@campaign.one/test_conn.txt")
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
?suppressMessages
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read("factorial_output.txt")
lol <- fars_read("factorial_output.txt")
View(lol)
make_filename(1996)
make_filename("1996")
make_filename("bjarneormen")
make_filename(as.factor("bjarneormen"))
lol <- "11995"
as.integer(lol)
lol <- "11995.8"
as.integer(lol)
lol <- "bach"
as.integer(lol)
?lapply
rm(lol)
getwd()
setwd()
setwd("C:/Users/JLYJ/Documents/LearningR/BuidlingPackages_week2/data/")
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
fars_read(filename = "accident_2013.csv.bz2")
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
make_filename(299)
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c(2005,2006))
fars_read_years(c(2013,2014,29273021))
fars_read_years(c("2014"))
fars_read_years <- function(years) {browser()
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(c("2014"))
fars_read_years(c("2014"))
fars_read_years(2014))
fars_read_years(2014)
getwd()
fars_read_years(2014)
my_list <- c(2013,2014,2015)
clasS(my_list)
class(my_list)
my_list <- c("2013","2014","2015")
class(my_list)
my_list <- as.vector(my_list)
class(my_list)
fars_read_years(c(2013,2014))
is.vector(X)
!is.vector(X)
is.object(X)
!is.vector(X) || is.object(X)
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2014)
library("magrittr")
library("dplyr")
library("tidyr")
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2013)
fars_read_years(c(2013,2014))
lol <- fars_read_years(c(2013,2014))
class(lol)
class(lol[1])
lol[1]
lol2 <- lol[1]
class(lol2)
lol3 <- as.tbl(lol2)
lol3 <- as.tbl_df(lol2)
lol3 <- as.data.frame(lol2)
lol2[1]
dim(lol2)
dim(lol2[1])
dim(lol2[2])
lol2
lol2
lol2[[1]]
lol2[[1]]$MONTH
lol2[[1]]
lol2[[1]][1,1]
lol2
fars_read_years(2012,2013,2014)
fars_read_years(c(2012,2013,2014))
fars_read_years("kasdah")
fars_read_years(c("kasdah",2014)
)
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(2014)
fars_read_years(c(2014))
View(lol3)
fars_summarize_years(2014)
2014_lol <- fars_summarize_years(2014)
data_2014 <- fars_summarize_years(2014)
#' fars_read
#'
#' @description Loads a datafile from disk. If no path is provided the current directory is used.
#' @description An error is provided if the file does not exist.
#'
#' @param filename, name of file containing data in csv format
#'
#' @return a dataframe of class tbl_df
#'
#' @importFrom dplyr, tbl_df
#'
#' @importFrom readr, read_csv
#'
#' @examples
#' fars_read("accident_2013.csv.bz2")
#' fars_read("C:/Users/My_filepath/accident_2013.csv.bz2")
#'
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' make_filename
#'
#' @description
#' Constructs a filename of the type accident_'year'_csv.z2, where year is
#' given as input.
#'
#' @param year, should be an integer
#'
#' @return a string
#'
#' @examples
#' make_filename(1996)
#'
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' fars_read_years
#'
#' @description
#' Given years as input, this function generates the proper filenames using
#' make_filename(), reads the files using fars_read(). The data is subsequently
#' manipulated by creating an extra column and selecting the colunms MONTH and year.
#' A warning message is provided if data does not exist for a given year. This
#' function will never fail, as whole function is run with tryCatch.
#'
#' @param years, a list of years (should be a list of integers)
#'
#' @importFrom dplyr, select, mutate
#' @importFrom magrittr, %>%
#'
#' @return
#' A list of lists of data for each valid year in the input list 'years'. The data
#'
#' @examples
#' fars_read_years(c(1995,1996,1997))
#' my_yrs <- c(2013,2014,2015))
#' fars__read_years(my_yrs)
#'
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' fars_summarize_years
#'
#' @description
#' Given a list of years, loads data associated with the years, selects and
#' summarizes relevant data.
#'
#' @param years, a list of years (should be a list of integers)
#'
#' @return A dataframe, with summary data of accidents for each month
#'
#' @importFrom tidyr, spread
#' @importFrom dplyr, bind_rows, summarize
#' @importFrom magrittr, %>%
#'
#' @examples
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' fars_map_state
#'
#' @description
#'
#' @param state.num
#' @param year
#'
#' @return
#' @export
#'
#' @examples
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(5,2014)
install.packages("maps")
install.packages("graphics")
fars_map_state(5,2014)
fars_map_state(50,2014)
fars_map_state(51,2014)
fars_map_state(55,2014)
fars_map_state(550,2014)
fars_map_state(100,2014)
fars_map_state(60,2014)
fars_map_state(55,2014)
fars_map_state(56,2014)
fars_map_state(57,2014)
fars_map_state(56,2014)
fars_map_state(56,2004)
source('~/LearningR/BuidlingPackages_week2/R_3_building_packages_week2_functions.R')
